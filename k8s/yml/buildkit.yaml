#
# rootless暂时不支持containerd
# https://github.com/moby/buildkit/blob/master/docs/rootless.md#known-limitations
# https://github.com/moby/buildkit/blob/master/examples/kubernetes/deployment%2Bservice.rootless.yaml
# https://github.com/moby/buildkit/tree/master/examples/kubernetes


apiVersion: v1
kind: ConfigMap
metadata:
  namespace: infra
  name: buildkitd.cm
data:
  buildkitd.toml: |-
    debug = true # 生产环境请false
    # 以下是测试地址
    [registry."docker.io"]
      mirrors = ["192.168.8.71:29108"]
      http = true
      insecure = true
    [registry."192.168.8.71:29108"]
      mirrors = ["192.168.8.71:29108"]
      http = true
      insecure = true
    [registry."192.168.8.71:29107"]
      mirrors = ["192.168.8.71:29107"]
      http = true
      insecure = true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: infra 
  labels:
    app: buildkitd
  name: buildkitd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: buildkitd
  template:
    metadata:
      labels:
        app: buildkitd
      #annotations:
      #  container.apparmor.security.beta.kubernetes.io/buildkitd: unconfined
      #  container.seccomp.security.alpha.kubernetes.io/buildkitd: unconfined
    # see buildkit/docs/rootless.md for caveats of rootless mode
    spec:
      containers:
        - name: buildkitd
          image: moby/buildkit:v0.9.2
          args:
            - --addr
            - unix:///run/buildkit/buildkitd.sock
            - --addr
            - tcp://0.0.0.0:1234
            #- --debug
            - --config
            - /etc/buildkit/buildkitd.toml
            #- --oci-worker=false 
            #- --containerd-worker=true
          # the probe below will only work after Release v0.6.3
          readinessProbe:
            exec:
              command:
                - buildctl
                - debug
                - workers
            initialDelaySeconds: 5
            periodSeconds: 30
          # the probe below will only work after Release v0.6.3
          livenessProbe:
            exec:
              command:
                - buildctl
                - debug
                - workers
            initialDelaySeconds: 5
            periodSeconds: 30
          securityContext:
            privileged: true
          ports:
            - containerPort: 1234
          volumeMounts:
            - name: cfg
              mountPath: /etc/buildkit/buildkitd.toml
              subPath: buildkitd.toml
      volumes:
        - name: cfg
          configMap:
            name: buildkitd.cm
---
apiVersion: v1
kind: Service
metadata:
  namespace: infra 
  labels:
    app: buildkitd
  name: buildkitd
spec:
  ports:
    - port: 1234
      targetPort: 1234      #Pod 的端口
      protocol: TCP
  selector:
    app: buildkitd

# kubectl delete ConfigMap tcp-services -n ingress-nginx
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
data:
  10180: "infra/jenkins:80"
  11234: "infra/buildkitd:1234"



# kubectl delete deployments.apps/buildkitd -n infra
# kubectl delete services/buildkitd -n infra
# kubectl create -f bk.yaml

# kubectl describe pod buildkitd   -n infra
# kubectl get pod -o wide  -n infra
# kubectl logs -f buildkitd-7f477c44c5-bpwfq  -n infra
# kubectl exec -it   buildkitd-7f477c44c5-bpwfq  -n infra -- /bin/sh

# wget https://github.com/moby/buildkit/releases/download/v0.9.2/buildkit-v0.9.2.linux-amd64.tar.gz
# tar -xzf buildkit-v0.9.2.linux-amd64.tar.gz 

# ./bin/buildctl  --addr tcp://172.20.228.98:1234 build --frontend dockerfile.v0 --local context=. --local dockerfile=. --opt source=df.sh
# ./bin/buildctl  --addr tcp://buildkitd:1234 build --frontend dockerfile.v0 --local context=. --local dockerfile=. --opt source=df.sh


# buildctl  --addr tcp://infra.fusjb.io:11234 build --frontend dockerfile.v0 --local context=. --local dockerfile=. --output type=image,name=192.168.8.71:29107/nginx/test:1.18-alpine-test,push=true,registry.insecure=true


# yum install nss-tools
# wget -O mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
# chmod +x  mkcert
# sudo mv mkcert /usr/local/bin
# mkcert -help

